# This script will deploy resources for Terraform backend and to run Github Action to deploy your Terraform scripts

# Define variables
$resourceGroupName = "rg-terraform-backend"
$location = "eastus2"
$vnetName = "vnet-terraform-backend"
$subnetName = "subnet-terraform-backend"
$storageAccountName = "aztfbackendstorage"
$containerName = "tfstate"
$keyVaultName = "kv-terraform-backend"
$terraformStateKey = "terraform.tfstate"
$spName = "sp-terraform-backend"
$managedIdentityName = "mi-terraform-backend"
$stgprivateEndpointName = "pe-stg-terraform-backend"
$kvprivateEndpointName = "pe-kv-terraform-backend"
$kvprivateDnsZoneName = "privatelink.vaultcore.azure.net"
$stgprivateDnsZoneName = "privatelink.blob.core.windows.net"
$subscriptionId = "/subscriptions/9e087dff-9c5b-4650-96ee-19cfe5269c5d"


# Create a resource group
az group create --name $resourceGroupName --location $location

# Create a virtual network
az network vnet create --name $vnetName --resource-group $resourceGroupName --location $location --address-prefixes 10.110.0.0/24

# Create a subnet within the virtual network
az network vnet subnet create --name $subnetName --vnet-name $vnetName --resource-group $resourceGroupName --address-prefixes 10.110.0.0/24

# Create a storage account
az storage account create --name $storageAccountName --resource-group $resourceGroupName --location $location --sku Standard_LRS --public-network-access disabled --kind StorageV2 --allow-shared-key-access false

# Create a private endpoint for the storage account
az network private-endpoint create --name $stgprivateEndpointName --resource-group $resourceGroupName --vnet-name $vnetName --subnet $subnetName --private-connection-resource-id $(az storage account show --name $storageAccountName --resource-group $resourceGroupName --query "id" --output tsv) --group-id blob --connection-name "myConnection"

# Create a private DNS zone
az network private-dns zone create --resource-group $resourceGroupName --name $stgprivateDnsZoneName

# Link the private DNS zone to the virtual network
az network private-dns link vnet create --resource-group $resourceGroupName --zone-name $stgprivateDnsZoneName --name "myDNSLink" --virtual-network $(az network vnet show --resource-group $resourceGroupName --name $vnetName --query "id" --output tsv) --registration-enabled false

# Create a DNS record for the private endpoint
az network private-endpoint dns-zone-group create --resource-group $resourceGroupName --endpoint-name $stgprivateEndpointName --name "myDNSZoneGroup" --private-dns-zone $privateDnsZoneName --zone-name $privateDnsZoneName

# Create a container in the storage account
az storage container create --name $containerName --account-name $storageAccountName

# Create a Key Vault
az keyvault create --name $keyVaultName --resource-group $resourceGroupName --location $location --public-network-access disabled  --enable-purge-protection true

# Create a private endpoint for the Key Vault
az network private-endpoint create --name $kvprivateEndpointName --resource-group $resourceGroupName --vnet-name $vnetName --subnet $subnetName --private-connection-resource-id $(az keyvault show --name $keyVaultName --resource-group $resourceGroupName --query "id" --output tsv) --group-id vault --connection-name "myKVConnection"

# Create a private DNS zone
az network private-dns zone create --resource-group $resourceGroupName --name $kvprivateDnsZoneName

# Link the private DNS zone to the virtual network
az network private-dns link vnet create --resource-group $resourceGroupName --zone-name $kvprivateDnsZoneName --name "myDNSLink" --virtual-network $(az network vnet show --resource-group $resourceGroupName --name $vnetName --query "id" --output tsv) --registration-enabled false

# Create a DNS record for the private endpoint
az network private-endpoint dns-zone-group create --resource-group $resourceGroupName --endpoint-name $kvprivateEndpointName --name "myDNSZoneGroup" --private-dns-zone $kvprivateDnsZoneName --zone-name $kvprivateDnsZoneName

# Create a user assigned managed identity
az identity create --name $managedIdentityName --resource-group $resourceGroupName --location $location

# Assign the managed identity to the resource group as contributor
az role assignment create --role "Contributor" --assignee $(az identity show --name $managedIdentityName --resource-group $resourceGroupName --query "principalId" --output tsv) --scope $(az group show --name $resourceGroupName --query "id" --output tsv)

# Assign the necessary roles to the managed identity for the Key Vault
az role assignment create --role "Key Vault Secrets User" --assignee $(az identity show --name $managedIdentityName --resource-group $resourceGroupName --query "principalId" --output tsv) --scope $(az keyvault show --name $keyVaultName --resource-group $resourceGroupName --query "id" --output tsv)

# Assign the managed identity to the Key Vault
#az keyvault set-policy --name $keyVaultName --resource-group $resourceGroupName --object-id $(az identity show --name $managedIdentityName --resource-group $resourceGroupName --query "principalId" --output tsv) --secret-permissions get list set

# Create a service principal for Terraform
$sp = (az ad sp create-for-rbac --name $spName --query "appId" --output tsv)

# Assign the Contributor role to the service principal at the subscription level
az role assignment create --role "Contributor" --assignee $sp --scope $subscriptionId

